// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Scanner.flex

package compiler;
import java.io.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Laxer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\211\u0100\1\u0600\1\u0100\1\u0e00\1\u0f00\1\u1000\1\u1100\123\u0100"+
    "\1\u0900\4\u0100\1\u1200\10\u0100\1\u1300\2\u0100\1\u1400\1\u1500"+
    "\1\u1100\1\u0100\1\u0500\1\u0100\1\u1600\1\u1300\1\u0800\3\u0100"+
    "\1\u1000\1\u1700\114\u0100\1\u1800\1\u1000\153\u0100\1\u1900\11\u0100"+
    "\1\u1a00\1\u1100\6\u0100\1\u1000\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21"+
    "\1\0\1\22\1\23\1\24\1\25\2\0\1\26\3\27"+
    "\1\30\1\27\2\31\1\32\2\31\1\33\1\31\1\34"+
    "\1\31\1\35\1\31\1\36\5\31\1\37\2\31\1\40"+
    "\1\0\1\41\1\0\1\42\1\0\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\31\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\31\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\37\1\70\1\31\1\71"+
    "\1\72\1\73\u01e2\0\12\74\206\0\12\74\306\0\12\74"+
    "\234\0\12\74\166\0\12\74\140\0\12\74\166\0\12\74"+
    "\106\0\12\74\u0116\0\12\74\106\0\12\74\u0146\0\12\74"+
    "\46\0\12\74\u012c\0\12\74\200\0\12\74\246\0\12\74"+
    "\6\0\12\74\266\0\12\74\126\0\12\74\206\0\12\74"+
    "\6\0\12\74\u0176\0\12\74\46\0\12\74\306\0\12\74"+
    "\26\0\12\74\126\0\12\74\u0196\0\12\74\246\0\12\74"+
    "\206\0\12\74\u012c\0\12\74\200\0\12\74\74\0\12\74"+
    "\220\0\12\74\166\0\12\74\146\0\12\74\206\0\12\74"+
    "\106\0\12\74\266\0\12\74\u0164\0\62\74\100\0\12\74"+
    "\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[6912];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\4\22\1\23\1\24\1\25"+
    "\15\22\1\26\1\1\1\27\1\1\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\0\1\2\1\36\1\37"+
    "\1\25\1\40\1\0\1\41\1\42\1\43\3\22\1\0"+
    "\1\44\1\25\12\22\1\45\15\22\1\46\2\0\3\22"+
    "\2\25\11\22\1\47\1\22\1\50\1\22\1\51\11\22"+
    "\1\0\1\37\3\22\2\25\1\52\1\22\1\53\3\22"+
    "\1\54\1\55\2\22\1\56\1\57\1\60\4\22\1\61"+
    "\1\62\1\63\2\22\1\64\2\22\2\25\1\65\1\66"+
    "\2\22\1\67\5\22\1\70\3\22\2\25\1\22\1\71"+
    "\1\72\1\22\1\73\1\74\1\75\3\22\2\25\1\22"+
    "\1\76\1\77\1\22\1\100\1\101\1\102\1\103\2\22"+
    "\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\172\0\267\0\364\0\75\0\u0131"+
    "\0\75\0\75\0\u016e\0\u01ab\0\75\0\u01e8\0\75\0\u0225"+
    "\0\u0262\0\u029f\0\75\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0"+
    "\0\u040d\0\u044a\0\u0487\0\75\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\75\0\u081a\0\75\0\u0857\0\75\0\364"+
    "\0\75\0\75\0\75\0\75\0\75\0\u0894\0\u08d1\0\75"+
    "\0\u090e\0\u094b\0\u0988\0\u0857\0\75\0\75\0\75\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0487\0\75\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0393"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\75\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u0393\0\u1404"+
    "\0\u0393\0\u1441\0\u0393\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u0393\0\u1811\0\u0393\0\u184e\0\u188b"+
    "\0\u18c8\0\u0393\0\u0393\0\u1905\0\u1942\0\u0393\0\u0393\0\u0393"+
    "\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u0393\0\u0393\0\u0393\0\u1a73"+
    "\0\u1ab0\0\u0393\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u0393\0\u0393"+
    "\0\u1be1\0\u1c1e\0\u0393\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f"+
    "\0\u0393\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u0393"+
    "\0\u0393\0\u1efa\0\u0393\0\u0393\0\u0393\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u0393\0\u0393\0\u20a5\0\u0393\0\u094b"+
    "\0\u094b\0\u0393\0\u20e2\0\u211f\0\u0393";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\6\27\1\30\1\31"+
    "\1\32\1\27\1\33\1\34\1\35\1\27\1\36\1\37"+
    "\1\40\1\41\1\42\2\27\1\43\3\27\1\44\1\27"+
    "\1\45\1\46\1\47\1\50\1\27\1\51\1\52\1\27"+
    "\1\53\1\54\1\55\1\56\77\0\1\3\116\0\1\57"+
    "\50\0\5\60\1\61\67\60\7\0\1\62\111\0\1\63"+
    "\74\0\1\64\74\0\1\65\62\0\1\66\4\0\1\67"+
    "\4\0\1\70\66\0\1\71\1\0\2\22\4\0\11\72"+
    "\1\73\2\0\27\72\3\0\1\74\16\0\1\71\1\0"+
    "\2\22\4\0\12\72\2\0\27\72\3\0\1\74\24\0"+
    "\1\75\74\0\1\76\74\0\1\77\70\0\2\27\4\0"+
    "\12\27\2\0\27\27\24\0\2\27\4\0\12\27\2\0"+
    "\5\27\1\100\21\27\24\0\2\27\4\0\12\27\2\0"+
    "\20\27\1\101\6\27\24\0\2\27\4\0\12\27\2\0"+
    "\5\27\1\102\21\27\5\0\3\103\35\0\1\104\53\0"+
    "\2\72\4\0\12\72\2\0\1\105\26\72\24\0\2\27"+
    "\4\0\12\27\2\0\16\27\1\106\1\27\1\107\1\27"+
    "\1\110\4\27\24\0\2\27\4\0\12\27\2\0\13\27"+
    "\1\111\2\27\1\112\10\27\24\0\2\27\4\0\12\27"+
    "\2\0\16\27\1\113\3\27\1\114\4\27\24\0\2\27"+
    "\4\0\12\27\2\0\13\27\1\115\13\27\24\0\2\27"+
    "\4\0\12\27\2\0\1\27\1\116\14\27\1\117\10\27"+
    "\24\0\2\27\4\0\12\27\2\0\6\27\1\120\5\27"+
    "\1\121\1\122\4\27\1\123\4\27\24\0\2\27\4\0"+
    "\12\27\2\0\5\27\1\124\15\27\1\125\3\27\24\0"+
    "\2\27\4\0\12\27\2\0\20\27\1\126\2\27\1\127"+
    "\3\27\24\0\2\27\4\0\12\27\2\0\5\27\1\130"+
    "\21\27\24\0\2\27\4\0\12\27\2\0\22\27\1\131"+
    "\4\27\24\0\2\27\4\0\12\27\2\0\10\27\1\132"+
    "\7\27\1\133\6\27\24\0\2\27\4\0\12\27\2\0"+
    "\16\27\1\134\10\27\24\0\2\27\4\0\12\27\2\0"+
    "\10\27\1\135\16\27\76\0\1\136\20\0\1\71\1\0"+
    "\2\74\52\0\1\74\12\66\1\137\62\66\2\67\1\3"+
    "\1\4\71\67\20\0\2\71\6\0\1\140\16\0\1\140"+
    "\24\0\1\71\20\0\2\72\4\0\12\72\2\0\27\72"+
    "\24\0\2\73\4\0\3\73\7\72\2\0\1\72\6\73"+
    "\20\72\24\0\2\27\4\0\12\27\2\0\25\27\1\141"+
    "\1\27\24\0\2\27\4\0\12\27\2\0\11\27\1\142"+
    "\15\27\24\0\2\27\4\0\12\27\2\0\1\27\1\143"+
    "\25\27\24\0\2\72\4\0\12\72\2\0\6\72\1\144"+
    "\4\72\1\145\13\72\24\0\2\27\4\0\12\27\2\0"+
    "\16\27\1\146\10\27\24\0\2\27\4\0\12\27\2\0"+
    "\5\27\1\147\21\27\24\0\2\27\4\0\12\27\2\0"+
    "\16\27\1\150\10\27\24\0\2\27\4\0\12\27\2\0"+
    "\1\27\1\151\25\27\24\0\2\27\4\0\12\27\2\0"+
    "\15\27\1\152\11\27\24\0\2\27\4\0\12\27\2\0"+
    "\23\27\1\153\3\27\24\0\2\27\4\0\12\27\2\0"+
    "\16\27\1\154\10\27\24\0\2\27\4\0\12\27\2\0"+
    "\21\27\1\155\5\27\24\0\2\27\4\0\12\27\2\0"+
    "\13\27\1\156\13\27\24\0\2\27\4\0\12\27\2\0"+
    "\20\27\1\157\6\27\24\0\2\27\4\0\12\27\2\0"+
    "\17\27\1\160\7\27\24\0\2\27\4\0\12\27\2\0"+
    "\22\27\1\161\4\27\24\0\2\27\4\0\12\27\2\0"+
    "\16\27\1\162\10\27\24\0\2\27\4\0\12\27\2\0"+
    "\25\27\1\163\1\27\24\0\2\27\4\0\12\27\2\0"+
    "\13\27\1\164\13\27\24\0\2\27\4\0\12\27\2\0"+
    "\11\27\1\165\15\27\24\0\2\27\4\0\12\27\2\0"+
    "\2\27\1\166\24\27\24\0\2\27\4\0\12\27\2\0"+
    "\22\27\1\167\4\27\24\0\2\27\4\0\12\27\2\0"+
    "\20\27\1\170\6\27\24\0\2\27\4\0\12\27\2\0"+
    "\11\27\1\171\15\27\24\0\2\27\4\0\12\27\2\0"+
    "\23\27\1\172\3\27\24\0\2\27\4\0\12\27\2\0"+
    "\11\27\1\173\15\27\24\0\2\27\4\0\12\27\2\0"+
    "\11\27\1\174\15\27\4\0\12\66\1\137\4\66\1\3"+
    "\55\66\13\0\1\175\1\0\1\175\2\0\2\176\52\0"+
    "\1\176\20\0\2\27\4\0\1\177\11\27\2\0\27\27"+
    "\24\0\2\27\4\0\12\27\2\0\15\27\1\200\11\27"+
    "\24\0\2\27\4\0\12\27\2\0\4\27\1\201\22\27"+
    "\24\0\2\72\4\0\12\72\2\0\23\72\1\202\3\72"+
    "\24\0\2\72\4\0\12\72\2\0\11\72\1\203\15\72"+
    "\24\0\2\27\4\0\12\27\2\0\13\27\1\204\13\27"+
    "\24\0\2\27\4\0\12\27\2\0\1\27\1\205\25\27"+
    "\24\0\2\27\4\0\12\27\2\0\11\27\1\206\15\27"+
    "\24\0\2\27\4\0\12\27\2\0\21\27\1\207\5\27"+
    "\24\0\2\27\4\0\12\27\2\0\22\27\1\210\4\27"+
    "\24\0\2\27\4\0\12\27\2\0\2\27\1\211\24\27"+
    "\24\0\2\27\4\0\12\27\2\0\11\27\1\212\15\27"+
    "\24\0\2\27\4\0\12\27\2\0\5\27\1\213\21\27"+
    "\24\0\2\27\4\0\12\27\2\0\21\27\1\214\5\27"+
    "\24\0\2\27\4\0\12\27\2\0\16\27\1\215\10\27"+
    "\24\0\2\27\4\0\12\27\2\0\2\27\1\216\1\27"+
    "\1\217\22\27\24\0\2\27\4\0\12\27\2\0\13\27"+
    "\1\220\13\27\24\0\2\27\4\0\12\27\2\0\24\27"+
    "\1\221\2\27\24\0\2\27\4\0\12\27\2\0\13\27"+
    "\1\222\13\27\24\0\2\27\4\0\12\27\2\0\23\27"+
    "\1\223\3\27\24\0\2\27\4\0\12\27\2\0\11\27"+
    "\1\224\15\27\24\0\2\27\4\0\12\27\2\0\21\27"+
    "\1\225\5\27\24\0\2\27\4\0\12\27\2\0\5\27"+
    "\1\226\21\27\24\0\2\27\4\0\12\27\2\0\4\27"+
    "\1\227\22\27\24\0\2\27\4\0\12\27\2\0\13\27"+
    "\1\230\13\27\24\0\2\176\52\0\1\176\20\0\2\27"+
    "\4\0\12\27\2\0\20\27\1\231\6\27\24\0\2\27"+
    "\4\0\12\27\2\0\22\27\1\232\4\27\24\0\2\27"+
    "\4\0\4\27\1\233\1\234\4\27\2\0\27\27\24\0"+
    "\2\72\4\0\12\72\2\0\15\72\1\235\11\72\24\0"+
    "\2\72\4\0\12\72\2\0\15\72\1\236\11\72\24\0"+
    "\2\27\4\0\12\27\2\0\12\27\1\237\14\27\24\0"+
    "\2\27\4\0\12\27\2\0\21\27\1\240\5\27\24\0"+
    "\2\27\4\0\12\27\2\0\11\27\1\241\15\27\24\0"+
    "\2\27\4\0\12\27\2\0\13\27\1\242\13\27\24\0"+
    "\2\27\4\0\12\27\2\0\5\27\1\243\21\27\24\0"+
    "\2\27\4\0\12\27\2\0\20\27\1\244\6\27\24\0"+
    "\2\27\4\0\12\27\2\0\1\27\1\245\25\27\24\0"+
    "\2\27\4\0\12\27\2\0\11\27\1\246\15\27\24\0"+
    "\2\27\4\0\12\27\2\0\20\27\1\247\6\27\24\0"+
    "\2\27\4\0\12\27\2\0\15\27\1\250\11\27\24\0"+
    "\2\27\4\0\12\27\2\0\5\27\1\251\21\27\24\0"+
    "\2\27\4\0\12\27\2\0\20\27\1\252\6\27\24\0"+
    "\2\27\4\0\12\27\2\0\15\27\1\253\11\27\24\0"+
    "\2\27\4\0\12\27\2\0\11\27\1\254\15\27\24\0"+
    "\2\72\4\0\12\72\2\0\3\72\1\255\23\72\24\0"+
    "\2\72\4\0\12\72\2\0\5\72\1\256\21\72\24\0"+
    "\2\27\4\0\12\27\2\0\15\27\1\257\11\27\24\0"+
    "\2\27\4\0\12\27\2\0\5\27\1\260\21\27\24\0"+
    "\2\27\4\0\12\27\2\0\22\27\1\261\4\27\24\0"+
    "\2\27\4\0\12\27\2\0\22\27\1\262\4\27\24\0"+
    "\2\27\4\0\12\27\2\0\3\27\1\263\23\27\24\0"+
    "\2\27\4\0\12\27\2\0\15\27\1\264\11\27\24\0"+
    "\2\27\4\0\12\27\2\0\7\27\1\265\17\27\24\0"+
    "\2\27\4\0\12\27\2\0\1\27\1\266\25\27\24\0"+
    "\2\27\4\0\12\27\2\0\22\27\1\267\4\27\24\0"+
    "\2\27\4\0\12\27\2\0\15\27\1\270\11\27\24\0"+
    "\2\72\4\0\12\72\2\0\1\271\26\72\24\0\2\72"+
    "\4\0\12\72\2\0\1\272\26\72\24\0\2\27\4\0"+
    "\12\27\2\0\23\27\1\273\3\27\24\0\2\27\4\0"+
    "\12\27\2\0\5\27\1\274\21\27\24\0\2\27\4\0"+
    "\12\27\2\0\26\27\1\275\24\0\2\27\4\0\12\27"+
    "\2\0\5\27\1\276\21\27\24\0\2\27\4\0\12\27"+
    "\2\0\5\27\1\277\21\27\24\0\2\72\4\0\12\72"+
    "\2\0\1\300\26\72\24\0\2\72\4\0\12\72\2\0"+
    "\1\301\26\72\24\0\2\27\4\0\12\27\2\0\5\27"+
    "\1\302\21\27\24\0\2\27\4\0\12\27\2\0\7\27"+
    "\1\303\17\27\24\0\2\27\4\0\12\27\2\0\5\27"+
    "\1\304\21\27\24\0\2\27\4\0\12\27\2\0\20\27"+
    "\1\305\6\27\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\10\1\1\11\16\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\0\5\11\1\0\1\1"+
    "\1\11\3\1\1\0\3\11\3\1\1\0\1\11\31\1"+
    "\1\11\2\0\34\1\1\0\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	public Symbol token (int tokenType) {
	 //   System.out.println(yytext());
	    return new Symbol(tokenType,yytext());
	}
    	public Symbol token (int tokenType , Object value) {
//	    System.out.println(yytext());
	    return new Symbol(tokenType , value);
	}
    StringBuffer out = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Laxer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            {
//              System.out.print(yytext());
            }
            // fall through
          case 69: break;
          case 2:
            { /*ignore*/
            }
            // fall through
          case 70: break;
          case 3:
            { return token(sym.NOT);
            }
            // fall through
          case 71: break;
          case 4:
            { return token(sym.MOD);
            }
            // fall through
          case 72: break;
          case 5:
            { return token(sym.LBRACES);
            }
            // fall through
          case 73: break;
          case 6:
            { return token(sym.RBRACES);
            }
            // fall through
          case 74: break;
          case 7:
            { return token(sym.PROD);
            }
            // fall through
          case 75: break;
          case 8:
            { return token(sym.ADD);
            }
            // fall through
          case 76: break;
          case 9:
            { return token(sym.COMMA);
            }
            // fall through
          case 77: break;
          case 10:
            { return token(sym.MINUS);
            }
            // fall through
          case 78: break;
          case 11:
            { return token(sym.DOT);
            }
            // fall through
          case 79: break;
          case 12:
            { return token(sym.DIV);
            }
            // fall through
          case 80: break;
          case 13:
            { return token(sym.INTCONST, new Integer(yytext()));
            }
            // fall through
          case 81: break;
          case 14:
            { return token(sym.COLON);
            }
            // fall through
          case 82: break;
          case 15:
            { return token(sym.LESS);
            }
            // fall through
          case 83: break;
          case 16:
            { return token(sym.ASSIGN);
            }
            // fall through
          case 84: break;
          case 17:
            { return token(sym.GREATER);
            }
            // fall through
          case 85: break;
          case 18:
            { return token(sym.ID , new String(yytext()));
            }
            // fall through
          case 86: break;
          case 19:
            { return token(sym.LBRACK);
            }
            // fall through
          case 87: break;
          case 20:
            { return token(sym.RBRACK);
            }
            // fall through
          case 88: break;
          case 21:
            { return token(sym.ERROR , new Exception());
            }
            // fall through
          case 89: break;
          case 22:
            { return token(sym.LCURLY);
            }
            // fall through
          case 90: break;
          case 23:
            { return token(sym.RCURLY);
            }
            // fall through
          case 91: break;
          case 24:
            { return token(sym.NOTEQUAL);
            }
            // fall through
          case 92: break;
          case 25:
            { return token(sym.STRINGCONST, new String(yytext()));
            }
            // fall through
          case 93: break;
          case 26:
            { return token(sym.AND);
            }
            // fall through
          case 94: break;
          case 27:
            { return token(sym.PRODASSIGN);
            }
            // fall through
          case 95: break;
          case 28:
            { return token(sym.ADDASSIGN);
            }
            // fall through
          case 96: break;
          case 29:
            { return token(sym.MINUSASSIGN);
            }
            // fall through
          case 97: break;
          case 30:
            { return token(sym.DIVASSIGN);
            }
            // fall through
          case 98: break;
          case 31:
            { return token(sym.DOUBLECONST , new Float(yytext()));
            }
            // fall through
          case 99: break;
          case 32:
            { return token(sym.HEXCONST , new String(yytext()));
            }
            // fall through
          case 100: break;
          case 33:
            { return token(sym.LESSEQUAL);
            }
            // fall through
          case 101: break;
          case 34:
            { return token(sym.EQUAL);
            }
            // fall through
          case 102: break;
          case 35:
            { return token(sym.GREATEREQUAL);
            }
            // fall through
          case 103: break;
          case 36:
            { return token(sym.LRBRACK);
            }
            // fall through
          case 104: break;
          case 37:
            { return token(sym.IF);
            }
            // fall through
          case 105: break;
          case 38:
            { return token(sym.OR);
            }
            // fall through
          case 106: break;
          case 39:
            { return token(sym.FOR);
            }
            // fall through
          case 107: break;
          case 40:
            { return token(sym.INT);
            }
            // fall through
          case 108: break;
          case 41:
            { return token(sym.NEW);
            }
            // fall through
          case 109: break;
          case 42:
            { return token(sym.BOOL);
            }
            // fall through
          case 110: break;
          case 43:
            { return token(sym.BTOI);
            }
            // fall through
          case 111: break;
          case 44:
            { return token(sym.DTOI);
            }
            // fall through
          case 112: break;
          case 45:
            { return token(sym.ELSE);
            }
            // fall through
          case 113: break;
          case 46:
            { return token(sym.ITOB);
            }
            // fall through
          case 114: break;
          case 47:
            { return token(sym.ITOD);
            }
            // fall through
          case 115: break;
          case 48:
            { return token(sym.NULL);
            }
            // fall through
          case 116: break;
          case 49:
            { return token(sym.THIS);
            }
            // fall through
          case 117: break;
          case 50:
            { return token(sym.TRUE);
            }
            // fall through
          case 118: break;
          case 51:
            { return token(sym.VOID);
            }
            // fall through
          case 119: break;
          case 52:
            { return token(sym.PRINT);
            }
            // fall through
          case 120: break;
          case 53:
            { return token(sym.BREAK);
            }
            // fall through
          case 121: break;
          case 54:
            { return token(sym.CLASS);
            }
            // fall through
          case 122: break;
          case 55:
            { return token(sym.FALSE);
            }
            // fall through
          case 123: break;
          case 56:
            { return token(sym.WHILE);
            }
            // fall through
          case 124: break;
          case 57:
            { return token(sym.DOUBLE);
            }
            // fall through
          case 125: break;
          case 58:
            { return token(sym.IMPORT);
            }
            // fall through
          case 126: break;
          case 59:
            { return token(sym.PUBLIC);
            }
            // fall through
          case 127: break;
          case 60:
            { return token(sym.RETURN);
            }
            // fall through
          case 128: break;
          case 61:
            { return token(sym.STRING);
            }
            // fall through
          case 129: break;
          case 62:
            { return token(sym.PRIVATE);
            }
            // fall through
          case 130: break;
          case 63:
            { return token(sym.NEWARRAY);
            }
            // fall through
          case 131: break;
          case 64:
            { return token(sym.READLINE);
            }
            // fall through
          case 132: break;
          case 65:
            { return token(sym.FUNC);
            }
            // fall through
          case 133: break;
          case 66:
            { return token(sym.LINE);
            }
            // fall through
          case 134: break;
          case 67:
            { return token(sym.CONTINUE);
            }
            // fall through
          case 135: break;
          case 68:
            { return token(sym.READINTEGER);
            }
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Laxer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Laxer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Laxer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
